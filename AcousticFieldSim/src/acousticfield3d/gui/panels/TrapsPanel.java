package acousticfield3d.gui.panels;

import acousticfield3d.algorithms.CalcField;
import acousticfield3d.gui.MainForm;
import acousticfield3d.math.Vector2f;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.Scene;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.simulation.Trap;
import acousticfield3d.utils.Parse;
import java.util.Comparator;
import java.util.List;

/**
 *
 * @author am14010
 */
public class TrapsPanel extends javax.swing.JPanel {
    final MainForm mf;
            
    public TrapsPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        focusCheck = new javax.swing.JCheckBox();
        twinRadio = new javax.swing.JRadioButton();
        angleText = new javax.swing.JTextField();
        vortexRadio = new javax.swing.JRadioButton();
        mText = new javax.swing.JTextField();
        noneRadio = new javax.swing.JRadioButton();
        calcButton = new javax.swing.JButton();
        calcClickCheck = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        pressureAText = new javax.swing.JTextField();
        pressureBText = new javax.swing.JTextField();
        pressureDivText = new javax.swing.JTextField();
        calcForceCheck = new javax.swing.JCheckBox();
        xForceText = new javax.swing.JTextField();
        yForceText = new javax.swing.JTextField();
        zForceText = new javax.swing.JTextField();
        calcLaplacianCheck = new javax.swing.JCheckBox();
        sendCheck = new javax.swing.JCheckBox();
        dragCheck = new javax.swing.JCheckBox();
        genAnimCheck = new javax.swing.JCheckBox();

        focusCheck.setSelected(true);
        focusCheck.setText("focus");
        focusCheck.setToolTipText("focus on the point");
        focusCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusCheckActionPerformed(evt);
            }
        });

        buttonGroup1.add(twinRadio);
        twinRadio.setText("twin");
        twinRadio.setToolTipText("twin trap");

        angleText.setText("90");
        angleText.setToolTipText("angle of the twin trap");

        buttonGroup1.add(vortexRadio);
        vortexRadio.setText("vortex");
        vortexRadio.setToolTipText("vortex trap");

        mText.setText("1");
        mText.setToolTipText("topological charge");

        buttonGroup1.add(noneRadio);
        noneRadio.setSelected(true);
        noneRadio.setText("none");
        noneRadio.setToolTipText("no extra signature for the focus");

        calcButton.setText("Calc");
        calcButton.setToolTipText("calculates the trap");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        calcClickCheck.setText("calc");
        calcClickCheck.setToolTipText("calculate new traps when clicking on a slice");
        calcClickCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcClickCheckActionPerformed(evt);
            }
        });

        jLabel3.setText("Pressure");

        pressureAText.setText("500");
        pressureAText.setToolTipText("pressure at the click position");

        pressureBText.setText("1500");
        pressureBText.setToolTipText("set this number as you wish, it is for getting percentages on the left text");
        pressureBText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressureBTextActionPerformed(evt);
            }
        });

        pressureDivText.setEditable(false);
        pressureDivText.setText("3");
        pressureDivText.setToolTipText("proportion between the pressures");

        calcForceCheck.setText("calc force");
        calcForceCheck.setToolTipText("calculates forces as well as pressure");
        calcForceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcForceCheckActionPerformed(evt);
            }
        });

        xForceText.setText("1500");

        yForceText.setText("1500");

        zForceText.setText("1500");

        calcLaplacianCheck.setText("calc lap");
        calcLaplacianCheck.setToolTipText("calculates laplacians as well as pressures");
        calcLaplacianCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcLaplacianCheckActionPerformed(evt);
            }
        });

        sendCheck.setText("send");
        sendCheck.setToolTipText("sends the phases to the devices when clicking on a slice");
        sendCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCheckActionPerformed(evt);
            }
        });

        dragCheck.setText("drag");
        dragCheck.setToolTipText("calculates & send when dragging the mouse on a slice");
        dragCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragCheckActionPerformed(evt);
            }
        });

        genAnimCheck.setText("add key frame");
        genAnimCheck.setToolTipText("adds a key frame when clicking on a slice");
        genAnimCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genAnimCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vortexRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(noneRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(twinRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(angleText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pressureAText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pressureDivText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pressureBText))
                    .addComponent(xForceText)
                    .addComponent(yForceText)
                    .addComponent(zForceText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(focusCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(calcButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(calcClickCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(dragCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genAnimCheck)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calcForceCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calcLaplacianCheck)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(focusCheck)
                    .addComponent(calcButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noneRadio)
                    .addComponent(twinRadio)
                    .addComponent(angleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vortexRadio)
                    .addComponent(mText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcClickCheck)
                    .addComponent(sendCheck)
                    .addComponent(dragCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genAnimCheck)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pressureAText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressureDivText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pressureBText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcForceCheck)
                    .addComponent(calcLaplacianCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xForceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yForceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zForceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void applyOnPosition(final Vector3f position){
        final List<Transducer> transducers = mf.simulation.getTransducers();
        getTrap().apply(mf.simulation, transducers, position);
    }
    
    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        Entity cp = Scene.getFirstWithTag( mf.getSelection(), Entity.TAG_CONTROL_POINT );
        
        if (cp == null){
            return;
        }
        
        applyOnPosition( cp.getTransform().getTranslation() );
        
        mf.needUpdate();
    }//GEN-LAST:event_calcButtonActionPerformed

    private void calcClickCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcClickCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calcClickCheckActionPerformed

    private void sendCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendCheckActionPerformed

    private void dragCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dragCheckActionPerformed

    private void genAnimCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genAnimCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genAnimCheckActionPerformed

    private void pressureBTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressureBTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pressureBTextActionPerformed

    private void calcForceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcForceCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calcForceCheckActionPerformed

    private void calcLaplacianCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcLaplacianCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calcLaplacianCheckActionPerformed

    private void focusCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_focusCheckActionPerformed

    
    

    public boolean isCalcOnClick(){
        return calcClickCheck.isSelected();
    }
    
    public void setPressureA(float p){
        pressureAText.setText( p + "");
        updatePressureDiv();
    }
    
    private void updatePressureDiv(){
        final float pA = Parse.toFloat( pressureAText.getText() );
        final float pB = Parse.toFloat( pressureBText.getText() );
        pressureDivText.setText( (pA/pB) + "");
    }
    
    public Trap getTrap(){
        final Trap t = new Trap();
        
        t.focus = focusCheck.isSelected();
        if (twinRadio.isSelected() ) {
            t.type = Trap.TrapType.Twin;
            t.parameter1 = Parse.toFloat( angleText.getText() );
        }else if (vortexRadio.isSelected() ) {
            t.type = Trap.TrapType.Vortex;
            t.parameter1 = Parse.toFloat( mText.getText() );
        }
        return t;
    }

    public void clickAt(Vector3f wPos) {
        final Vector2f field = CalcField.calcFieldAt(wPos, mf);
        setPressureA(field.length());

        if (calcClickCheck.isSelected() ) {
            applyOnPosition(wPos);
            if ( sendCheck.isSelected() ){
                mf.transControlPanel.sendPattern();
            }
            if ( genAnimCheck.isSelected()){
                mf.animPanel.addKeyFrame();
            }
            mf.needUpdate();
        }
        
        if (calcForceCheck.isSelected() || calcLaplacianCheck.isSelected()){
            
            final float particleR = mf.scene.getParticleRadious();
            final Vector3f pos = wPos;
            Vector3f v3 = new Vector3f();
            
            if ( calcForceCheck.isSelected() ){
               v3 = CalcField.calcForceAt(pos.x, pos.y, pos.z, particleR, mf);

            }else if ( calcLaplacianCheck.isSelected() ){
               v3 = CalcField.calcForceGradients(pos.x, pos.y, pos.z, particleR, mf);
            }
            
            xForceText.setText( v3.x + "");
            yForceText.setText( v3.y + "");
            zForceText.setText( v3.z + "");
        }
        
       
    }
    
    public void reportGorkovs() {
//        for (Transducer t : mf.simulation.transducers){
//            if (t.getOrderNumber() >= 256){
//                t.setOrderNumber( t.getOrderNumber() - 256);
//            }else{
//                t.setOrderNumber( t.getOrderNumber() + 256);
//            }
//        }
//        mf.simulation.transducers.sort( Comparator.comparing( Transducer::getOrderNumber ) );
        
        for(Entity e : mf.simulation.controlPoints){
            final Vector3f pos = e.getTransform().getTranslation();
            final double g = CalcField.calcGorkovAt(pos.x, pos.y, pos.z, 0.0005f, mf);
            System.out.println( g + "");
        }
    
    }
    
    public boolean isDrag(){
        return dragCheck.isSelected();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField angleText;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton calcButton;
    private javax.swing.JCheckBox calcClickCheck;
    private javax.swing.JCheckBox calcForceCheck;
    private javax.swing.JCheckBox calcLaplacianCheck;
    private javax.swing.JCheckBox dragCheck;
    private javax.swing.JCheckBox focusCheck;
    private javax.swing.JCheckBox genAnimCheck;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField mText;
    private javax.swing.JRadioButton noneRadio;
    private javax.swing.JTextField pressureAText;
    private javax.swing.JTextField pressureBText;
    private javax.swing.JTextField pressureDivText;
    private javax.swing.JCheckBox sendCheck;
    private javax.swing.JRadioButton twinRadio;
    private javax.swing.JRadioButton vortexRadio;
    private javax.swing.JTextField xForceText;
    private javax.swing.JTextField yForceText;
    private javax.swing.JTextField zForceText;
    // End of variables declaration//GEN-END:variables

    


}
